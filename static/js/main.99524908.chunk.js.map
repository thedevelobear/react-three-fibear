{"version":3,"sources":["components/Bear.js","components/Lights.js","shaders/AdditiveBlendingShader.js","shaders/VolumetricLightShader.js","components/Effects.js","components/Loading.js","components/Controls.js","components/Logo.js","components/Stars.js","components/Grayscale.js","App.js","index.js"],"names":["Bear","props","group","useRef","gltf","useLoader","GLTFLoader","loader","dracoLoader","DRACOLoader","setDecoderPath","setDRACOLoader","theta","useRender","current","y","Math","sin","THREE","degToRad","rotation","set","useSpring","scale","config","mass","friction","tension","spring","setSpring","bindHover","useHover","hovering","pointerEvents","ref","name","position","layers","layer","castShadow","receiveShadow","attach","__$","geometry","material","roughness","Lights","intensity","angle","PI","shadow-mapSize-width","shadow-mapSize-height","uniforms","tDiffuse","value","tAdd","vertexShader","join","fragmentShader","lightPosition","exposure","decay","density","weight","samples","Effects","useThree","gl","scene","camera","size","occlusionRenderTarget","useMemo","occlusionComposer","composer","light","useEffect","setSize","width","height","useFrame","render","mesh","args","color","renderToScreen","attachArray","VolumetricLightShader","needsSwap","AdditiveBlendingShader","material-uniforms-tAdd-value","texture","FXAAShader","material-uniforms-resolution-value","undefined","Loading","useState","finished","setWidth","onLoad","onProgress","url","itemsLoaded","itemsTotal","useTransition","from","opacity","leave","update","map","item","key","div","className","style","Controls","enableZoom","enableKeys","minPolarAngle","maxPolarAngle","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","Logo","children","logo","scaleX","scaleY","onClick","window","location","href","transparent","Stars","r","s","cos","Array","fill","i","random","geo","mat","coords","p1","p2","p3","Grayscale","extend","OrbitControls","EffectComposer","RenderPass","ShaderPass","UnrealBloomPass","FilmPass","SMAAPass","App","shadowMap","fallback","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.99524908.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\nimport { useLoader, useRender } from \"react-three-fiber\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { DRACOLoader } from \"three/examples/jsm/loaders/DRACOLoader\";\nimport * as THREE from \"three\";\nimport { useHover } from \"react-use-gesture\";\nimport { a, useSpring } from \"react-spring/three\";\n\nconst Bear = props => {\n  const group = useRef();\n  const gltf = useLoader(\n    GLTFLoader,\n    process.env.NODE_ENV === \"production\"\n      ? \"/react-three-fibear/DevelobearDraco.gltf\"\n      : \"/DevelobearDraco.gltf\",\n    loader => {\n      const dracoLoader = new DRACOLoader();\n      dracoLoader.setDecoderPath(\"/draco-gltf/\");\n      loader.setDRACOLoader(dracoLoader);\n    }\n  );\n  let theta = 0;\n  useRender(() => {\n    if (group.current) {\n      const y = Math.sin(THREE.Math.degToRad((theta += 0.7)));\n      group.current.rotation.set(0, y, 0);\n    }\n  });\n  const [spring, setSpring] = useSpring(() => ({\n    scale: [0.2, 0.2, 0.2],\n    config: { mass: 3, friction: 40, tension: 800 }\n  }));\n\n  const bindHover = useHover(\n    ({ hovering }) =>\n      setSpring({ scale: hovering ? [0.25, 0.25, 0.25] : [0.2, 0.2, 0.2] }),\n    {\n      pointerEvents: true\n    }\n  );\n\n  return (\n    <a.group ref={group} {...props} {...spring} {...bindHover()}>\n      <scene name=\"Scene\">\n        <object3D name=\"Spot\" position={[0, 0, 0]} />\n        <group name=\"Bear\" position={[0, 0, 0]} rotation={[0, 0, 0]}>\n          <mesh\n            name=\"Cilindro.001_0\"\n            layers={props.layer}\n            castShadow\n            receiveShadow\n          >\n            <bufferGeometry attach=\"geometry\" {...gltf.__$[4].geometry} />\n            <meshStandardMaterial\n              attach=\"material\"\n              {...gltf.__$[4].material}\n              name=\"brown\"\n              roughness={1}\n            />\n          </mesh>\n          <mesh\n            name=\"Cilindro.001_1\"\n            layers={props.layer}\n            castShadow\n            receiveShadow\n          >\n            <bufferGeometry attach=\"geometry\" {...gltf.__$[5].geometry} />\n            <meshStandardMaterial\n              attach=\"material\"\n              {...gltf.__$[5].material}\n              name=\"light brown\"\n              roughness={1}\n            />\n          </mesh>\n          <mesh\n            name=\"Cilindro.001_2\"\n            layers={props.layer}\n            castShadow\n            receiveShadow\n          >\n            <bufferGeometry attach=\"geometry\" {...gltf.__$[6].geometry} />\n            <meshStandardMaterial\n              attach=\"material\"\n              {...gltf.__$[6].material}\n              name=\"almost black\"\n              roughness={1}\n            />\n          </mesh>\n          <mesh\n            name=\"Cilindro.001_3\"\n            layers={props.layer}\n            castShadow\n            receiveShadow\n          >\n            <bufferGeometry attach=\"geometry\" {...gltf.__$[7].geometry} />\n            <meshStandardMaterial\n              attach=\"material\"\n              {...gltf.__$[7].material}\n              name=\"almost white\"\n              roughness={1}\n            />\n          </mesh>\n        </group>\n      </scene>\n    </a.group>\n  );\n};\n\nexport { Bear };\n","import React from \"react\";\n\nconst Lights = () => {\n  return (\n    <group>\n      <ambientLight />\n      <pointLight />\n      <spotLight\n        castShadow\n        intensity={5}\n        angle={Math.PI / 16}\n        position={[10, 10, 10]}\n        shadow-mapSize-width={4056}\n        shadow-mapSize-height={4056}\n      />\n    </group>\n  );\n};\n\nexport { Lights };\n","export default {\n  uniforms: {\n    tDiffuse: { value: null },\n    tAdd: { value: null }\n  },\n\n  vertexShader: [\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n    \"vUv = uv;\",\n    \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\"),\n\n  fragmentShader: [\n    \"uniform sampler2D tDiffuse;\",\n    \"uniform sampler2D tAdd;\",\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n    \"vec4 color = texture2D( tDiffuse, vUv );\",\n    \"vec4 add = texture2D( tAdd, vUv );\",\n    \"gl_FragColor = color + add;\",\n    \"}\"\n  ].join(\"\\n\")\n};\n","import * as THREE from \"three\";\n\nexport default {\n  uniforms: {\n    tDiffuse: { value: null },\n    lightPosition: { value: new THREE.Vector2(0.5, 0.5) },\n    exposure: { value: 0.18 },\n    decay: { value: 0.95 },\n    density: { value: 1.0 },\n    weight: { value: 0.4 },\n    samples: { value: 60 }\n  },\n\n  vertexShader: [\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n    \"vUv = uv;\",\n    \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\"),\n\n  fragmentShader: [\n    \"varying vec2 vUv;\",\n    \"uniform sampler2D tDiffuse;\",\n    \"uniform vec2 lightPosition;\",\n    \"uniform float exposure;\",\n    \"uniform float decay;\",\n    \"uniform float density;\",\n    \"uniform float weight;\",\n    \"uniform int samples;\",\n    \"const int MAX_SAMPLES = 100;\",\n    \"void main()\",\n    \"{\",\n    \"vec2 texCoord = vUv;\",\n    \"vec2 deltaTextCoord = texCoord - lightPosition;\",\n    \"deltaTextCoord *= 1.0 / float(samples) * density;\",\n    \"vec4 color = texture2D(tDiffuse, texCoord);\",\n    \"float illuminationDecay = 1.0;\",\n    \"for(int i=0; i < MAX_SAMPLES; i++)\",\n    \"{\",\n    \"if(i == samples){\",\n    \"break;\",\n    \"}\",\n    \"texCoord -= deltaTextCoord;\",\n    \"vec4 sample = texture2D(tDiffuse, texCoord);\",\n    \"sample *= illuminationDecay * weight;\",\n    \"color += sample;\",\n    \"illuminationDecay *= decay;\",\n    \"}\",\n    \"gl_FragColor = color * exposure;\",\n    \"}\"\n  ].join(\"\\n\")\n};\n","import React, { useEffect, useMemo, useRef } from \"react\";\nimport { useFrame, useThree } from \"react-three-fiber\";\nimport * as THREE from \"three\";\nimport { AdditiveBlendingShader, VolumetricLightShader } from \"../shaders\";\nimport { FXAAShader } from \"three/examples/jsm/shaders/FXAAShader\";\nimport {a, useSpring} from \"react-spring/three\";\nimport {useHover} from \"react-use-gesture\";\n\nconst DEFAULT_LAYER = 0;\nconst OCCLUSION_LAYER = 1;\n\nconst Effects = () => {\n  const { gl, scene, camera, size } = useThree();\n  const occlusionRenderTarget = useMemo(\n    () => new THREE.WebGLRenderTarget(),\n    []\n  );\n  const occlusionComposer = useRef();\n  const composer = useRef();\n  const light = useRef();\n\n  useEffect(() => {\n    occlusionComposer.current.setSize(size.width, size.height);\n    composer.current.setSize(size.width, size.height);\n  }, [size]);\n\n  useFrame(() => {\n    camera.layers.set(OCCLUSION_LAYER);\n    occlusionComposer.current.render();\n    camera.layers.set(DEFAULT_LAYER);\n    composer.current.render();\n  }, 1);\n\n  const [spring, setSpring] = useSpring(() => ({\n    scale: [1, 1, 1],\n    config: { mass: 3, friction: 40, tension: 800 }\n  }));\n\n  const bindHover = useHover(\n      ({ hovering }) =>\n          setSpring({ scale: hovering ? [1.25, 1.25, 1.25] : [1, 1, 1] }),\n      {\n        pointerEvents: true\n      }\n  );\n\n  return (\n    <>\n      <a.mesh ref={light} layers={OCCLUSION_LAYER} {...spring} {...bindHover()}>\n        <circleGeometry attach=\"geometry\" args={[0.8, 50]} />\n        <meshBasicMaterial attach=\"material\" color=\"#ffddaa\" />\n      </a.mesh>\n      <effectComposer\n        ref={occlusionComposer}\n        args={[gl, occlusionRenderTarget]}\n        renderToScreen={false}\n      >\n        <renderPass attachArray=\"passes\" args={[scene, camera]} />\n        <shaderPass\n          attachArray=\"passes\"\n          args={[VolumetricLightShader]}\n          needsSwap={false}\n        />\n      </effectComposer>\n      <effectComposer ref={composer} args={[gl]}>\n        <renderPass attachArray=\"passes\" args={[scene, camera]} />\n        <shaderPass\n          attachArray=\"passes\"\n          args={[AdditiveBlendingShader]}\n          material-uniforms-tAdd-value={occlusionRenderTarget.texture}\n        />\n        <shaderPass\n          attachArray=\"passes\"\n          args={[FXAAShader]}\n          material-uniforms-resolution-value={[1 / size.width, 1 / size.height]}\n          renderToScreen\n        />\n        <unrealBloomPass attachArray=\"passes\" args={[undefined, 0.2, 0.2, 0]} />\n        <filmPass attachArray=\"passes\" args={[0.7, 0.5, 1000, false]} />\n      </effectComposer>\n    </>\n  );\n};\n\nexport { Effects };\n","import React, { useEffect, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { a, useTransition } from \"react-spring\";\n\nconst Loading = () => {\n  const [finished, set] = useState(false);\n  const [width, setWidth] = useState(0);\n\n  useEffect(() => {\n    THREE.DefaultLoadingManager.onLoad = () => set(true);\n    THREE.DefaultLoadingManager.onProgress = (url, itemsLoaded, itemsTotal) =>\n      setWidth((itemsLoaded / itemsTotal) * 200);\n  }, []);\n\n  const props = useTransition(finished, null, {\n    from: { opacity: 1, width: 0 },\n    leave: { opacity: 0 },\n    update: { width }\n  });\n\n  return props.map(\n    ({ item: finished, key, props: { opacity, width } }) =>\n      !finished && (\n        <a.div className=\"loading\" key={key} style={{ opacity }}>\n          <div className=\"loading-bar-container\">\n            <a.div className=\"loading-bar\" style={{ width }} />\n          </div>\n        </a.div>\n      )\n  );\n};\n\nexport { Loading };\n","import React, { useRef } from \"react\";\nimport { useRender, useThree } from \"react-three-fiber\";\n\nconst Controls = () => {\n  const { camera } = useThree();\n  const ref = useRef();\n  useRender(() => ref.current.update());\n  return (\n    <orbitControls\n      args={[camera]}\n      ref={ref}\n      enableZoom={false}\n      enableKeys={false}\n      minPolarAngle={Math.PI / 2.5}\n      maxPolarAngle={Math.PI / 1.7}\n      minAzimuthAngle={-Math.PI / 16}\n      maxAzimuthAngle={Math.PI / 16}\n      enableDamping\n      dampingFactor={0.07}\n    />\n  );\n};\n\nexport { Controls };\n","import React, { useRef } from \"react\";\nimport * as THREE from \"three\";\nimport { useLoader } from \"react-three-fiber\";\nimport {a, useSpring} from \"react-spring/three\";\nimport {useHover} from \"react-use-gesture\";\n\nconst Logo = ({ children, size = 55, ...props }) => {\n  const geometry = useRef();\n  const material = useRef();\n  const logo = useLoader(THREE.TextureLoader, process.env.NODE_ENV === \"production\" ? \"/react-three-fibear/logo.png\" : \"/logo.png\");\n  const scaleX = 0.1 * size;\n  const scaleY = 0.04 * size;\n  const scaleZ = 0.1;\n\n    const [spring, setSpring] = useSpring(() => ({\n        scale: [scaleX, scaleY, scaleZ],\n        config: { mass: 3, friction: 40, tension: 800 }\n    }));\n\n    const bindHover = useHover(\n        ({ hovering }) =>\n            setSpring({ scale: hovering ? [1.2 * scaleX, 1.2 * scaleY, 1.2 * scaleZ] : [scaleX, scaleY, scaleZ] }),\n        {\n            pointerEvents: true\n        }\n    );\n\n  return (\n    <a.group className=\"link\" {...props} scale={[0.1 * size, 0.04 * size, 0.1]} {...spring} {...bindHover()} onClick={() => window.location.href = 'https://thedevelobear.com'}>\n      <mesh\n        args={[geometry, material]}\n        position={[0, 1, -20]}\n        receiveShadow\n        castShadow\n      >\n        <planeGeometry ref={geometry} attach=\"geometry\" />\n        <meshPhongMaterial\n          transparent\n          ref={material}\n          attach=\"material\"\n          map={logo}\n        />\n      </mesh>\n    </a.group>\n  );\n};\n\nexport { Logo };\n","import React, { useMemo, useRef } from \"react\";\nimport * as THREE from \"three\";\nimport { useRender } from \"react-three-fiber\";\n\nconst Stars = () => {\n  let group = useRef();\n  let theta = 0;\n  useRender(() => {\n    if (group.current) {\n      const r = 5 * Math.sin(THREE.Math.degToRad((theta += 0.002)));\n      const s = Math.cos(THREE.Math.degToRad(theta * 2));\n      group.current.rotation.set(r, r, r);\n      group.current.scale.set(s, s, s);\n    }\n  });\n\n  const [geo, mat, coords] = useMemo(() => {\n    const geo = new THREE.SphereBufferGeometry(0.3, 10, 10);\n    const mat = new THREE.MeshBasicMaterial({\n      color: new THREE.Color(\"#ffddaa\")\n    });\n    const coords = new Array(1000)\n      .fill()\n      .map(i => [\n        Math.random() * 800 - 400,\n        Math.random() * 800 - 400,\n        Math.random() * 800 - 400\n      ]);\n    return [geo, mat, coords];\n  }, []);\n\n  return (\n    <group ref={group}>\n      {coords.map(([p1, p2, p3], i) => (\n        <mesh key={i} geometry={geo} material={mat} position={[p1, p2, p3]} />\n      ))}\n    </group>\n  );\n};\nexport { Stars };\n","import React from \"react\";\n\nconst Grayscale = ({ children }) => {\n  return <div className=\"grayscale\">{children}</div>;\n};\n\nexport { Grayscale };\n","import React, { Suspense } from \"react\";\nimport { Canvas, extend } from \"react-three-fiber\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer\";\nimport { RenderPass } from \"three/examples/jsm/postprocessing/RenderPass\";\nimport { ShaderPass } from \"three/examples/jsm/postprocessing/ShaderPass\";\nimport { Bear } from \"./components/Bear\";\nimport { Lights } from \"./components/Lights\";\nimport { Effects } from \"./components/Effects\";\nimport { Loading } from \"./components/Loading\";\nimport { Controls } from \"./components/Controls\";\nimport { Logo } from \"./components/Logo\";\nimport { Stars } from \"./components/Stars\";\nimport { UnrealBloomPass } from \"three/examples/jsm/postprocessing/UnrealBloomPass\";\nimport { FilmPass } from \"three/examples/jsm/postprocessing/FilmPass\";\nimport { SMAAPass } from \"three/examples/jsm/postprocessing/SMAAPass\";\nimport { Grayscale } from \"./components/Grayscale\";\n\nextend({\n  OrbitControls,\n  EffectComposer,\n  RenderPass,\n  ShaderPass,\n  UnrealBloomPass,\n  FilmPass,\n  SMAAPass\n});\n\nconst DEFAULT_LAYER = 0;\nconst OCCLUSION_LAYER = 1;\n\nconst App = () => {\n  return (\n    <Grayscale>\n      <Loading />\n      <Canvas shadowMap camera={{ position: [0, 0, 4.5] }}>\n        <Controls />\n        <Suspense fallback={null}>\n          <Logo />\n        </Suspense>\n        <Effects />\n        <Lights />\n        <Suspense fallback={null}>\n          <Bear\n            layer={DEFAULT_LAYER}\n            position={[0, -0.45, 2]}\n            scale={[0.2, 0.2, 0.2]}\n          />\n          <Bear\n            layer={OCCLUSION_LAYER}\n            position={[0, -0.45, 2]}\n            scale={[0.2, 0.2, 0.2]}\n          />\n        </Suspense>\n        <Stars />\n      </Canvas>\n    </Grayscale>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}